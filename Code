#include<stdio.h>
#include<unistd.h>
#include<stdlib.h>
void bankersAlgo(int noProcesse, int noResources) {
	
	int i, j, k;
    noProcesse = 5; 
    noResources = 4;
	int n = noProcesse;
	int m =  noResources;
	int temp[n], FinalAns[n], inc = 0; 
	int available[4] = { 1, 5, 2, 0};
    int allocation[5][4] = { { 0, 0, 1, 2},
                        { 1, 0, 0, 0},  
                        { 1, 3, 5, 4}, 
                        { 0, 6, 3, 2}, 
                        { 0, 0, 1, 4} };
  
    int maximum[5][4] = { { 0, 0, 1, 2},
                        { 1, 7, 5, 0},  
                        { 2, 3, 5, 6}, 
                        { 0, 6, 5, 2}, 
                        { 0, 6, 5, 6} }; 
 
    for (k = 0; k < n; k++) { 
        temp[k] = 0; 
    } 
    int needMatrix[n][m]; 
    for (i = 0; i < n; i++) { 
        for (j = 0; j < m; j++) 
            needMatrix[i][j] = maximum[i][j] - allocation[i][j]; 
    } 
    int y = 0; 
    for (k = 0; k < 5; k++) { 
        for (i = 0; i < n; i++) { 
            if (temp[i] == 0) { 
  
                int check = 0; 
                for (j = 0; j < m; j++) { 
                    if (needMatrix[i][j] > available[j]) 
                        check = 1; 
                    break; 
                } 
  
                if (check == 0) { 
                    FinalAns[inc++] = i; 
                    for (y = 0; y < m; y++) 
                        available[y] += allocation[i][y]; 
                    temp[i] = 1; 
                } 
            } 
        } 
    } 
  
    printf("The Safe Sequence is as follows :\n"); 
    for (i = 0; i < n - 1; i++) 
        printf(" P%d ->", FinalAns[i]); 
    printf(" P%d", FinalAns[n - 1]); 
}
int main() {
	bankersAlgo(5, 4);
    return (0);  
} 
